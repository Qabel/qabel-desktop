plugins {
    id "com.github.hierynomus.license" version "0.12.1"     // Apache V2 https://github.com/hierynomus/license-gradle-plugin/blob/master/LICENSE
    id 'nebula.dependency-lock' version '4.2.0'             // Apache V2 https://github.com/nebula-plugins/gradle-dependency-lock-plugin/blob/master/LICENSE
    id "org.sonarqube" version "2.0.1"
}


apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'c'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

mainClassName = "de.qabel.desktop.DesktopClient"
version = hasProperty('release') ? release : 'dev'
new File('dist/resources/version').write version.toString()
def platform = "${System.properties['os.name'].toLowerCase()}_${System.properties['os.arch']}"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
    flatDir {
        dir 'libs'
        dir System.getProperty('java.home') + '/lib/ext'        // to please sonarqube
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
    guiTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-gui/java')
        }
        resources.srcDir file('src/test-gui/resources')
    }
    dist {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDirs = []
        }
        resources.srcDir file('dist/resources')
    }
}
jar {
    from sourceSets.dist.output
}

configurations {
    guiTestCompile.extendsFrom testCompile
    guiTestRuntime.extendsFrom testRuntime
    compile {
        description = 'compile classpath'
        transitive = true
    }
    runtime {
        extendsFrom compile
    }
}

startScripts {
    classpath += configurations.compile
    doLast{
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-Djava.library.path=\\\$APP_HOME/lib/"')
    }
}

jar.doFirst{
	manifest {
		attributes 'Implementation-Title': 'Qabel Desktop Client', 'Implementation-Version': version
		attributes 'Main-Class': mainClassName
	    attributes 'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
	}
}

dependencies {
    compile ':jfxrt:'                                        // built-in javafx to please sonarqube
    testCompile 'junit:junit:4.+'                            // Eclipse Public License - v 1.0 https://github.com/junit-team/junit/blob/master/LICENSE-junit.txt
    testCompile 'org.meanbean:meanbean:2.+'                  // Apache License V2.0 http://meanbean.sourceforge.net
    testCompile 'org.testfx:testfx-core:4.+'                 // EUPL 1.1 https://github.com/TestFX/TestFX/blob/master/LICENSE.txt
    testCompile 'org.testfx:testfx-junit:4.+'                // EUPL 1.1 https://github.com/TestFX/TestFX/blob/master/LICENSE.txt

    compile 'org.ocpsoft.prettytime:prettytime:3.2.+'        //Apache License https://github.com/ocpsoft/prettytime/blob/master/LICENSE
    compile 'commons-cli:commons-cli:1.2'                    //Apache License
    compile 'commons-codec:commons-codec:1.10'               //Apache License
    compile 'org.apache.httpcomponents:httpclient:4.5.+'     //Apache License
    compile 'org.apache.httpcomponents:httpmime:4.5.+'       //Apache License
    compile 'org.json:json:20090211'                         //None? https://github.com/stleary/JSON-java
    compile 'javax.inject:javax.inject:1'                    //Apache License http://mvnrepository.com/artifact/javax.inject/javax.inject/1
    compile 'com.airhacks:afterburner.fx:1.7.+'              //Apache License https://github.com/AdamBien/afterburner.fx

    compile 'com.github.audax:qabel-core:kotlin-SNAPSHOT'

    compile 'com.google.code.gson:gson:2.+'                  //Apache License https://github.com/google/gson/blob/master/LICENSE
    compile 'org.slf4j:slf4j-api:1.7.+'                      //MIT http://www.slf4j.org/license.html
    compile 'log4j:log4j:1.2.+'                              //Apache License https://logging.apache.org/log4j/1.2/license.html
    compile 'org.apache.logging.log4j:log4j-api:2.4.+'
    compile 'org.apache.logging.log4j:log4j-core:2.4.+'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.4.+'
    compile 'org.apache.james:apache-mime4j:0.7.+'
    compile 'org.apache.commons:commons-lang3:3.+'

    compile 'org.xerial:sqlite-jdbc:3.8.+'                   //Apache License https://bitbucket.org/xerial/sqlite-jdbc

    compile 'com.github.zafarkhaja:java-semver:0.9.+'        // MIT https://github.com/zafarkhaja/jsemver/blob/master/LICENSE

    testCompile name: 'box-test-0.7.0'
    testCompile 'info.cukes:cucumber-java:1.2.+'
    testCompile 'info.cukes:cucumber-junit:1.2.+'
    testCompile 'com.tngtech.java:junit-dataprovider:1.10.+'    // Apache v2
}

task copyToLib(type: Copy) {
  	from configurations.runtime
    into "$buildDir/libs"
}

classes {
	 doLast {
        copyToLib.execute()
    }
}

task guiTest(type: Test) {
    testClassesDir = sourceSets.guiTest.output.classesDir
    classpath = sourceSets.guiTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging {
        events 'started'
        exceptionFormat 'full'
    }
}

test {
    testLogging {
        events 'started'
    }
}

check.dependsOn guiTest
guiTest.mustRunAfter test

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

tasks.withType(Test) {
    systemProperty 'java.library.path', 'libs/'

    reports.html.destination = file("${reporting.baseDir}/${name}")
}
run {
    systemProperty 'java.library.path', 'libs/'
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Qabel Desktop Client', 'Implementation-Version': version
        attributes 'Main-Class': mainClassName
        attributes 'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
    }

    baseName = project.name + '-all-' + platform
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

}
distZip() {
    baseName = project.name + '-' + platform

    from (configurations.compile) {
        into baseName + '-' + version + '/lib/'
    }
    from ('libs/') {
        into baseName + '-' + version + '/lib/'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

downloadLicenses {
    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
    ext.bsd = license('BSD License', 'http://www.opensource.org/licenses/bsd-license.php')
    includeProjectDependencies = true

    aliases = [
            (apacheTwo) : ['Apache 2.0', 'The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
            (bsd) : ['BSD', license('New BSD License', 'http://www.opensource.org/licenses/bsd-license.php'), 'BSD License']
    ]

    licenses = [
            'org.ocpsoft.prettytime:prettytime:3.2.7.Final' : apacheTwo,
            ':afterburner:' : apacheTwo
    ]

    dependencyConfiguration = 'testCompile'
}
task distLicenses(type: Copy) {
    from('src/main/resources')
    include('dependency-license.xml', 'license-dependency.xml')
    into('dist/resources/')
}

distLicenses.dependsOn tasks['downloadLicenses']
jar.dependsOn(distLicenses)

task lock() {}
lock.dependsOn(saveLock)
saveLock.dependsOn(updateLock)

